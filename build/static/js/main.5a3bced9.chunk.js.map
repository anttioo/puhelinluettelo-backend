{"version":3,"sources":["services/person.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","filter","setFilter","value","onChange","e","currentTarget","PersonFrom","newName","setNewName","addPerson","newNumber","setNewNumber","onClick","type","Persons","persons","removePerson","map","person","key","name","number","Notification","msg","style","className","App","useState","setPersons","useEffect","personService","all","notification","setNotification","filteredPersons","toLowerCase","includes","showNotification","setTimeout","preventDefault","length","oldId","modifiedPerson","created","catch","error","JSON","stringify","window","confirm","status","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5a3bced9.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\n\n\nexport default { getAll, create, update, remove }","import React, {useState, useEffect} from 'react';\nimport personService from './services/person'\nimport './styles.css'\n\nconst Filter = ({filter, setFilter}) => {\n    return <>\n        Filter shown with <input value={filter} onChange={(e) => setFilter(e.currentTarget.value)}/>\n    </>\n}\n\nconst PersonFrom = ({newName, setNewName, addPerson, newNumber, setNewNumber }) => {\n\n    return <form>\n        <div>\n            name: <input value={newName} onChange={(e) => setNewName(e.currentTarget.value)}/><br/>\n            number: <input value={newNumber} onChange={(e) => setNewNumber(e.currentTarget.value)}/><br/>\n        </div>\n        <div>\n            <button onClick={addPerson} type=\"submit\">add</button>\n        </div>\n    </form>\n}\n\nconst Persons = ({persons,  removePerson}) => {\n    return <ul>\n        {persons.map(person => (\n                <li key={person.id}>{person.name} {person.number} <button onClick={() => removePerson(person.id)}>delete</button></li>\n            )\n        )}\n    </ul>\n}\n\nconst Notification = ({msg, style}) => {\n    return <div id=\"notification\" className={style}>{msg}</div>\n}\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n\n    useEffect(() => {\n        personService.getAll()\n            .then( all => {\n                setPersons(all)\n            })\n    },[])\n\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [notification, setNotification] = useState(null)\n\n    const filteredPersons = persons.filter( person => {\n        const name = person.name.toLowerCase()\n        return name.includes(filter.toLowerCase())\n\n    })\n\n    const addPerson = e => {\n        e.preventDefault()\n\n        const sameNamed = persons.filter( person => person.name.toLowerCase() === newName.toLowerCase()).length > 0\n\n        if (sameNamed) {\n            const oldId = persons.filter( person => person.name.toLowerCase() === newName.toLowerCase())[0].id\n            personService.update(oldId, {name: newName, number: newNumber})\n                .then( modifiedPerson => {\n                    setPersons( persons.map( person => {\n                        return person.id !== modifiedPerson.id ? person : modifiedPerson\n\n                    }))\n                    showNotification(\"success\", `Edited ${newName}`)\n                })\n            return\n        }\n        personService.create({name: newName, number: newNumber})\n            .then( created => {\n                setPersons([...persons, created ])\n                showNotification(\"success\", `Added ${newName}`)\n            })\n            .catch( error => {\n            showNotification(\"error\", JSON.stringify(error.response.data))\n        })\n    }\n\n    const removePerson = id => {\n        const name = persons.filter( person => person.id === id)[0].name\n        if ( window.confirm(`Delete ${name} ?`) ) {\n            personService.remove(id)\n                .then( () => {\n                        setPersons(persons.filter( person => person.id !== id))\n                        showNotification(\"success\", `Deleted ${name}`)\n                })\n                .catch( ( error ) => {\n                    if (error.response.status === 404) {\n                        showNotification(\"error\", `Information of ${name} has already been removed from server`)\n                    }\n                })\n\n        }\n\n    }\n\n    const showNotification = (style, msg) => {\n        setNotification({ style, msg })\n        setTimeout(() => {\n            setNotification(null)\n        }, 3000)\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            { notification ? <Notification style={notification.style} msg={notification.msg}/> : null }\n            <Filter filter={filter} setFilter={setFilter}/>\n            <h2>Add a new</h2>\n            <PersonFrom\n                newName={newName}\n                setNewName={setNewName}\n                newNumber={newNumber}\n                setNewNumber={setNewNumber}\n\n                addPerson={addPerson}/>\n            <h2>Numbers</h2>\n            <Persons persons={filteredPersons} removePerson={removePerson}/>\n        </div>\n    )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}